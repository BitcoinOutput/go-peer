package mempool

import (
	"fmt"
	"os"
	"testing"

	"github.com/number571/go-peer/cmd/ubc/kernel/settings"
	"github.com/number571/go-peer/cmd/ubc/kernel/transaction"
	"github.com/number571/go-peer/crypto/asymmetric"
	"github.com/number571/go-peer/encoding"
)

const (
	tcPrivKey = "Priv(go-peer/rsa){3082025C02010002818100C6498F4C2E238D3FA4D133E1A53A2C76D50752EAE6B9F716E0C7E1ABE47B49F0F141F1BD9411DB5A5285E9C14A20B0E703885D06513A79950C7EE6E31EEE24CECF044D62105C6CA6DD134C7E51513B16B1454BFBBB6F62A26111C3C89FD091E1A094985D50F3E9C3DF4AFE7E22C95AC62E52B9F7677E41EAA2BE0FBA0E60D731020301000102818060541017743AB53DFBF5DDFC7AE65DFF84D24007F9FAD1FCFD4A5D69C25FDAB6009E86B010A4F42956F9D36BA1756C3B6E4DEAD34CD6D985FD42112CB933FC10D7AFDDD125A907C3619BF2EAE809DDCE935E3E67AAE84A43E8E0330074F957F1024D803A8444CCDE6160BF189CCA9401ACA5DF509CD1D6B2754ABB8AC5D1D499024100FDC116B09235544664EFC0740B0A84BCCF9C1639CD323586ED6EFF39623458506E40944A1BBD2F4E29D92E78636AB17A38FCD7ED21D5A4F48A0A5B1FA5CDBA83024100C80ACDD59989B60922DD50B57C51D3681AA59C0D5786398120136F6736D7720295ACD02E1FC8627809E1071F5DBADD9FA40810B877024558EED51DAEDE82C93B02402BC5A80D535B41AB56F40885BBF5D789DE62356F491735268E448C6030B188DE6EF652DE29C4CBA9370CD0B851A5F0F17D6D182E3E9CE4F48DEF5562B32E36D3024100BDEE042099F6B66F563AEB3665230BA5FC26E15389965762D221A1D44DADA101F33A712E59DED81F40C1F71140DCFB2F677E80E1A39CF45ACBE86C966B8DA1A1024032E37D5ED53666986AEAB0FCB882CB4235B7820DBA4F8A8D5D77946C34998FA80156812477A82C7F24493CCE2066E6973E4E4375539CA34463B3B8BF7DBCCE43}"
	tcTX      = "TX{7B227061796C6F6164223A22614756736247387349486476636D786B49513D3D222C2268617368223A22467077543567634D58306D454E615A51594B7A426237397177685767465A6A65703051574F7448333474383D222C227369676E223A224436572F326C76797066766F42712B486F584A2B527A79427A444B584542546855345277335270524B32584E4B316B657A622B5A525649712B325271312F6B7354766F6A6A4548366A546A374E736F527649485A374B456C50766B483539537468487678624F6870487A695262526D7176744C4261726E5155576B6645346F6B6B36394F6D554E64764F326E7853314E497235475536756179695430684A38534147764A4C58664F304D733D222C2276616C696461746F72223A224D49474A416F4742414D5A4A6A3077754934302F704E457A346155364C48625642314C7135726E33467544483461766B65306E7738554878765A51523231705368656E425369437735774F4958515A524F6E6D564448376D347837754A4D375042453169454678737074305454483552555473577355564C2B37747659714A68456350496E394352346143556D463151382B6E443330722B66694C4A5773597555726E335A33354236714B2B44376F4F594E637841674D424141453D227D}"
	tcHashTX  = "FpwT5gcMX0mENaZQYKzBb79qwhWgFZjep0QWOtH34t8="
)

func TestMempool(t *testing.T) {
	const (
		mempoolName = "mempool.db"
	)

	defer os.RemoveAll(mempoolName)

	mempool := NewMempool(mempoolName)
	defer mempool.Close()

	if mempool.Height() != 0 {
		t.Errorf("init mempool with height != 0")
		return
	}

	tx := transaction.LoadTransaction(tcTX)
	mempool.Push(tx)
	if mempool.Height() != 1 {
		t.Errorf("mempool with 1 push has height != 1")
		return
	}

	loadTX := mempool.Transaction(encoding.Base64Decode(tcHashTX))
	if loadTX == nil {
		t.Errorf("load tx from mempool = nil")
		return
	}

	priv := asymmetric.LoadRSAPrivKey(tcPrivKey)
	txSize := settings.GSettings.Get(settings.CSizeTrns).(uint64)
	for i := uint64(0); i < txSize-1; i++ {
		tx := transaction.NewTransaction(priv,
			[]byte(fmt.Sprintf("transaction-%d", i)))
		mempool.Push(tx)
	}

	if mempool.Height() != txSize {
		t.Errorf("mempool height != CSizeTrns")
		return
	}

	txs := mempool.Pop()
	if len(txs) != int(txSize) {
		t.Errorf("len of pop txs != CSizeTrns")
		return
	}
}
