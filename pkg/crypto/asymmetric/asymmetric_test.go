package asymmetric

import (
	"bytes"
	"testing"
)

const (
	tcPrivKey = `Priv(go-peer/rsa){308204A50201000282010100D7114DDEDB12344F4C7086819B91DCE5FE4DD914306BBAFDDA2EB1080A43F98EC0281DD07B5D1F9229DF38E2C986F8CA6B2AC42E4E8E9F021A38E82A03388B4F2314D58D738BB9D77243CC7D8641C574B4CDC00A1D2720329E1162F1EDC7FDA9BF2F9948E927CCF6C274321473E769AA68CB3669729B19BC1CE022E9BA1E0683F3970330ED7FC7F9E836CD1CDB67B571CD98B82FBEB624948E4BD3CF161250311F2661BB6D0885C3E81B66219CB3407619DF239427214328F1C10CC591C490417DB13CB6B90EC22FEC7B7E4BE8B9B3B75E9820D6446AE7F5690CE0ED048DA5ACE47105A1441F4C765CF345499EBFB55B1FFCFE9CAEF2795E3826075AECF2CED502030100010282010100B9E90F7371D44EBBADCC27B9AA0D70F2AFDE03A4DC2684422474F03B8F042B9A26A986FC4D67B67ED70B4B555FF7F8E0A1BB1A531D3D545EB0E4386CF8D3CC38E08E85FBFCC1F02839723A36D7F3CB0893B2B82B06006868D9131681239719C3BEAD1AC858243B9DA38266381FE90F026C0C1E4110FCDA462E7FE22E40E0EBA756B1BC47F9D517D9C92BAC70AFB22DC4B40F31FDDA1F6E854579239C46461D45C3F3E9CDD172BEB8171CE16F04EB20C10A86DCF364A7757FE948061776CD706F1C8B526637B7F53E83D8CDF7B66549A3FD9F6BDDA83A5C499B268EE08D016592BD5854C53D1CD0C85C1E50188817CF16F1EEAF3AD6A064B08B3894639F49C09102818100DFF1AA38A23CBEB84EE566C46CA055BD0382ACBF50EA55B3422A056CC2C07A7F8849252AC375358894D428C7C36BB54E3CDCBA561C49021C41B782B23455E365C48D07F7D7D12FD94BC5239A9B9C4A303CF1025B0207E07388787D6471C785F7E14DD42A9C7F4588ABF54BE793300856C19ACD231183729908F7706931DEE7F302818100F5DA5DEED020D9251B8FCE707442BFBEC2394CDDEDA79E5844D199F0FC2B02D8A4F930EAB2DD13EB7A83EA75500195B15D78846AD7FC72F9EE57CEDF571EB6B4F284F7BC11905EBD8B1D8E4B8DCD3F8D22C21004327662B71C88D8FD97D8221C47F8E7D5F9A8D23737AD49027F9A580D05A9ACF9FA252C8B173EC96D751A281702818100DCDF3FA247F15DB1EEAEB763383813182F642CF92CD752DB50809D851DB835999F537542EE30A6322587F308C3A771D4CE966D7A0CBFBD431D55DFA3DF966E87AB09E637FE3625D94DB00C63AAE2C5113AAA0246BC84044E2EE597D6FF99687A894EF7D9672CE7E9DAA03ED3120AA7CED978D2A6A9D959A7B27E49F296EB611D0281802941E9FD87A3DB8CE4A12F6DA3B507E485478464C1DB1D3186EAFDC07930E69B60A408D77A08ABAD1AB444864754DCC0150582834397B3DBC969A6E7C800F97C482E943C555E3AE7E80E9FB0822D6D7ACBD87143A30C46E89FBB3F5EDF3A800EEAED144ACE48CC6E43C3AABAE69B0A27B5499223A91CCFEACF8DD3D3B091212502818100C68D284CAC625B8AB21E2ABDC62B418C66F8E707402F763F4087C55BCAE98197C2D9829E3136FCE952A240230CDCB993BF6BDEF1178CEE8E7305CF538F42687B2CB57497187C885DCC38E4988D9FCDFAA5D505A85056FA248D6638E236FFBB68C34A7FC119ED3EC5270317DD39D3B9A6440C4094403466EE23FDE541F01DB2F8}`
	tcPubKey  = `Pub(go-peer/rsa){3082010A0282010100D7114DDEDB12344F4C7086819B91DCE5FE4DD914306BBAFDDA2EB1080A43F98EC0281DD07B5D1F9229DF38E2C986F8CA6B2AC42E4E8E9F021A38E82A03388B4F2314D58D738BB9D77243CC7D8641C574B4CDC00A1D2720329E1162F1EDC7FDA9BF2F9948E927CCF6C274321473E769AA68CB3669729B19BC1CE022E9BA1E0683F3970330ED7FC7F9E836CD1CDB67B571CD98B82FBEB624948E4BD3CF161250311F2661BB6D0885C3E81B66219CB3407619DF239427214328F1C10CC591C490417DB13CB6B90EC22FEC7B7E4BE8B9B3B75E9820D6446AE7F5690CE0ED048DA5ACE47105A1441F4C765CF345499EBFB55B1FFCFE9CAEF2795E3826075AECF2CED50203010001}`
)

const (
	tcPrivKeyFormat = `Priv(go-peer/rsa){
		3082025B02010002818100D59444EDDC5B15D57DE8BCC2785E1051B3B8F5EC55
		E00D86853C0E6AA5AD352E6221B6DAEF04B4F1883E3408FEBB1FA9DED81BF4FD
		DBB848B428F4856D5724A852D97E98E122C8B55F5100873B87DD320BE08B3BC8
		EFE6DF94E6F5DD55DA50FFC1BE894D4FF781627AC374BF1608FE92A4F4C5997D
		B63A18E4B794810499793D02030100010281803F3761A79DDF7FF8EF09A24555
		6752213CB6F4637D8F91B14D62574A0DBBD4CFE3CFE2D5AE859021259873C26D
		D3692DD87DD2D8930323EAB118A6379003891F96BC053FEBE433D3C3B151A57B
		48D553265D60922BCDF81B61E2AECA028D34FCA54017BE67F222EABDB15007CB
		6C90EFE9AB6C165CF3EEA268EE1F0880D62B01024100DE358356741E303EBE33
		864FD9A20BE8ADBC09F8B2F8FDC3E2702D068C92C9CA972FAB17F350621AB9DC
		2B89556ECCC016EEFA65B4CCFCC0FC40CF5CEA1195E1024100F60ECCD515BAD3
		A3E6F78EA9576A3B05E8564C8827B9E341D6554EB3E003F020AE56004DB3A450
		1FF811343CF71A26776EDC0A7900F81429DAFEE9CB7241D6DD02405B07D12639
		ABA4580FD34BD2AA75982B5A010E94B3BD0D38922B2246EC8FB5DB28D47E62F1
		6A9CC6161DFC37E6A7DD7953EBD2E89788E282ACD4601ED045240102400A9C34
		C4F37CECE7626C466092FE67B12785A12335E3542360A4A9122494C6E401E07F
		7EDA42399A474E269C826344495E246AE730DD81B1145A6DA67234D899024070
		EDDDA27A3E1EF6F4D6DC6AD38EF351E9FD00FBFE79644B3A953D70F3CB3FCB1C
		E9AB4F31558BB78722CA8322FB5B1C609270E25570CA84B96F5809B3BEA6C7
	}`

	tcPubKeyFormat = `Pub(go-peer/rsa){
		30818902818100D59444EDDC5B15D57DE8BCC2785E1051B3B8F5EC55E00D8685
		3C0E6AA5AD352E6221B6DAEF04B4F1883E3408FEBB1FA9DED81BF4FDDBB848B4
		28F4856D5724A852D97E98E122C8B55F5100873B87DD320BE08B3BC8EFE6DF94
		E6F5DD55DA50FFC1BE894D4FF781627AC374BF1608FE92A4F4C5997DB63A18E4
		B794810499793D0203010001
	}`
)

func TestLoadRSAKey(t *testing.T) {
	priv := LoadRSAPrivKey(tcPrivKey)
	if priv == nil {
		t.Error("failed load private key")
	}

	pub := LoadRSAPubKey(tcPubKey)
	if pub == nil {
		t.Error("failed load public key")
	}

	if priv.PubKey().Address().String() != pub.Address().String() {
		t.Error("load public key have not relation with private key")
	}
}

func TestLoadRSAFormatKey(t *testing.T) {
	priv := LoadRSAPrivKey(tcPrivKeyFormat)
	if priv == nil {
		t.Error("failed load private key (format)")
	}

	pub := LoadRSAPubKey(tcPubKeyFormat)
	if pub == nil {
		t.Error("failed load public key (format)")
	}

	if priv.PubKey().Address().String() != pub.Address().String() {
		t.Error("load public key have not relation with private key (format)")
	}
}

func TestRSASign(t *testing.T) {
	var (
		priv = NewRSAPrivKey(1024)
		msg  = []byte("hello, world!")
	)

	pub := priv.PubKey()
	sign := priv.Sign(msg)

	if !pub.Verify(msg, sign) {
		t.Error("signature is invalid")
	}
}

func TestRSAEncrypt(t *testing.T) {
	var (
		priv = NewRSAPrivKey(1024)
		msg  = []byte("hello, world!")
	)

	pub := priv.PubKey()
	emsg := pub.Encrypt(msg)

	if !bytes.Equal(msg, priv.Decrypt(emsg)) {
		t.Error("decrypted message is invalid")
	}
}
